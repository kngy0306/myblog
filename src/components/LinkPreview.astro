---
// LinkPreview.astro
// A component that fetches OGP data from a URL and displays it as a rich preview

interface Props {
  url: string;
}

const { url } = Astro.props;

// Import ogp-parser on the server side only
import ogpParser from 'ogp-parser';

// Fetch OGP data
let ogpData = null;
let error = null;

try {
  const result = await ogpParser.parse(url, { followRedirect: true });
  ogpData = result.data;
} catch (e) {
  error = e;
  console.error(`Error fetching OGP data for ${url}:`, e);
}

// Extract relevant OGP data
const title = ogpData?.ogTitle || url;
const description = ogpData?.ogDescription || '';
const image = ogpData?.ogImage?.[0]?.url || null;
const siteName = ogpData?.ogSiteName || new URL(url).hostname;
---

{error ? (
  <a href={url} target="_blank" rel="noopener noreferrer">{url}</a>
) : (
  <a 
    href={url} 
    target="_blank" 
    rel="noopener noreferrer" 
    class="block no-underline my-4 border rounded-lg overflow-hidden transition-shadow duration-200 hover:shadow-md"
  >
    <div class="flex flex-col md:flex-row">
      {image && (
        <div class="md:w-1/3 overflow-hidden">
          <img 
            src={image} 
            alt={title} 
            class="w-full h-auto object-cover"
            style="max-height: 160px;"
          />
        </div>
      )}
      <div class="p-4 md:w-2/3">
        <div class="text-base font-semibold text-blue-800 mb-1">{title}</div>
        <div class="text-sm text-gray-600 line-clamp-2 mb-2">{description}</div>
        <div class="text-xs text-gray-500">{siteName}</div>
      </div>
    </div>
  </a>
)}